{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { ApolloClient, InMemoryCache } from 'apollo-boost';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nimport { isBrowser } from './isBrowser';\nlet apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!isBrowser) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState, {\n  getToken,\n  fetchOptions\n}) {\n  const httpLink = createHttpLink({\n    uri: 'https://api.graph.cool/simple/v1/cj5geu3slxl7t0127y8sity9r',\n    credentials: 'same-origin',\n    fetchOptions\n  });\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    const token = getToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? `Bearer ${token}` : ''\n      })\n    };\n  }); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(initialState, options) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    let fetchOptions = {}; // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n    // 'https-proxy-agent' is required here because it's a sever-side only module\n\n    if (process.env.https_proxy) {\n      fetchOptions = {\n        agent: new (require('https-proxy-agent'))(process.env.https_proxy)\n      };\n    }\n\n    return create(initialState, _objectSpread({}, options, {\n      fetchOptions\n    }));\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["C:\\git\\whatabyte\\lib\\initApollo.ts"],"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","fetch","isBrowser","apolloClient","global","create","initialState","getToken","fetchOptions","httpLink","uri","credentials","authLink","_","headers","token","authorization","connectToDevTools","ssrMode","link","concat","cache","restore","initApollo","options","window","process","env","https_proxy","agent","require"],"mappings":";AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAAmE,cAAnE;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,IAAIC,YAAwD,GAAG,IAA/D,C,CAEA;;AACA,IAAI,CAACD,SAAL,EAAgB;AACdE,EAAAA,MAAD,CAAgBH,KAAhB,GAAwBA,KAAxB;AACA;;AASD,SAASI,MAAT,CAAgBC,YAAhB,EAAmC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAnC,EAAwE;AACvE,QAAMC,QAAQ,GAAGV,cAAc,CAAC;AAC/BW,IAAAA,GAAG,EAAE,4DAD0B;AAE/BC,IAAAA,WAAW,EAAE,aAFkB;AAG/BH,IAAAA;AAH+B,GAAD,CAA/B;AAMA,QAAMI,QAAQ,GAAGZ,UAAU,CAAC,CAACa,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoB;AAC/C,UAAMC,KAAK,GAAGR,QAAQ,EAAtB;AACA,WAAO;AACNO,MAAAA,OAAO,oBACHA,OADG;AAENE,QAAAA,aAAa,EAAED,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFrC;AADD,KAAP;AAMA,GAR0B,CAA3B,CAPuE,CAiBvE;;AAEA,SAAO,IAAIlB,YAAJ,CAAiB;AACvBoB,IAAAA,iBAAiB,EAAEf,SADI;AAEvBgB,IAAAA,OAAO,EAAE,CAAChB,SAFa;AAEF;AACrBiB,IAAAA,IAAI,EAAEP,QAAQ,CAACQ,MAAT,CAAgBX,QAAhB,CAHiB;AAIvBY,IAAAA,KAAK,EAAE,IAAIvB,aAAJ,GAAoBwB,OAApB,CAA4BhB,YAAY,IAAI,EAA5C;AAJgB,GAAjB,CAAP;AAMA;;AAED,eAAe,SAASiB,UAAT,CAAoBjB,YAApB,EAAuCkB,OAAvC,EAAyD;AACvE;AACA;AACA,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAClC,QAAIjB,YAAY,GAAG,EAAnB,CADkC,CAElC;AACA;;AACA,QAAIkB,OAAO,CAACC,GAAR,CAAYC,WAAhB,EAA6B;AAC5BpB,MAAAA,YAAY,GAAG;AACdqB,QAAAA,KAAK,EAAE,KAAKC,OAAO,CAAC,mBAAD,CAAZ,EAAmCJ,OAAO,CAACC,GAAR,CAAYC,WAA/C;AADO,OAAf;AAGA;;AACD,WAAOvB,MAAM,CAACC,YAAD,oBACTkB,OADS;AAEZhB,MAAAA;AAFY,OAAb;AAIA,GAhBsE,CAkBvE;;;AACA,MAAI,CAACL,YAAL,EAAmB;AAClBA,IAAAA,YAAY,GAAGE,MAAM,CAACC,YAAD,EAAekB,OAAf,CAArB;AACA;;AAED,SAAOrB,YAAP;AACA","sourcesContent":["import { ApolloClient, InMemoryCache, NormalizedCacheObject } from 'apollo-boost';\r\nimport { createHttpLink } from 'apollo-link-http';\r\nimport { setContext } from 'apollo-link-context';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport { isBrowser } from './isBrowser';\r\n\r\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\r\n\r\n// Polyfill fetch() on the server (used by apollo-client)\r\nif (!isBrowser) {\r\n\t(global as any).fetch = fetch;\r\n}\r\n\r\nexport interface Options {\r\n\tgetToken: () => string;\r\n\tfetchOptions?: {\r\n\t\tagent?: any;\r\n\t};\r\n}\r\n\r\nfunction create(initialState: any, { getToken, fetchOptions }: Options) {\r\n\tconst httpLink = createHttpLink({\r\n\t\turi: 'https://api.graph.cool/simple/v1/cj5geu3slxl7t0127y8sity9r',\r\n\t\tcredentials: 'same-origin',\r\n\t\tfetchOptions\r\n\t});\r\n\r\n\tconst authLink = setContext((_, { headers }) => {\r\n\t\tconst token = getToken();\r\n\t\treturn {\r\n\t\t\theaders: {\r\n\t\t\t\t...headers,\r\n\t\t\t\tauthorization: token ? `Bearer ${token}` : ''\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n\r\n\t// Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\r\n\r\n\treturn new ApolloClient({\r\n\t\tconnectToDevTools: isBrowser,\r\n\t\tssrMode: !isBrowser, // Disables forceFetch on the server (so queries are only run once)\r\n\t\tlink: authLink.concat(httpLink),\r\n\t\tcache: new InMemoryCache().restore(initialState || {})\r\n\t});\r\n}\r\n\r\nexport default function initApollo(initialState: any, options: Options) {\r\n\t// Make sure to create a new client for every server-side request so that data\r\n\t// isn't shared between connections (which would be bad)\r\n\tif (typeof window === 'undefined') {\r\n\t\tlet fetchOptions = {};\r\n\t\t// If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\r\n\t\t// 'https-proxy-agent' is required here because it's a sever-side only module\r\n\t\tif (process.env.https_proxy) {\r\n\t\t\tfetchOptions = {\r\n\t\t\t\tagent: new (require('https-proxy-agent'))(process.env.https_proxy)\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn create(initialState, {\r\n\t\t\t...options,\r\n\t\t\tfetchOptions\r\n\t\t});\r\n\t}\r\n\r\n\t// Reuse client on the client-side\r\n\tif (!apolloClient) {\r\n\t\tapolloClient = create(initialState, options);\r\n\t}\r\n\r\n\treturn apolloClient;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}