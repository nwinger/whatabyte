{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\git\\\\whatabyte\\\\lib\\\\withApollo.tsx\";\nimport React from 'react';\nimport cookie from 'cookie';\nimport PropTypes from 'prop-types';\nimport { getDataFromTree } from 'react-apollo';\nimport Head from 'next/head';\nimport initApollo from './initApollo';\nimport { isBrowser } from './isBrowser';\n\nfunction parseCookies(req, options = {}) {\n  return cookie.parse(req ? req.headers.cookie || '' : document.cookie, options);\n}\n\nexport default (App => {\n  var _class, _temp;\n\n  return _temp = _class = class WithData extends React.Component {\n    static async getInitialProps(ctx) {\n      const {\n        AppTree,\n        ctx: {\n          req,\n          res\n        }\n      } = ctx;\n      const apollo = initApollo({}, {\n        getToken: () => parseCookies(req).token\n      });\n      ctx.ctx.apolloClient = apollo;\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      if (res && res.finished) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        return {};\n      }\n\n      if (!isBrowser) {\n        // Run all graphql queries in the component tree\n        // and extract the resulting data\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(React.createElement(AppTree, _extends({}, appProps, {\n            apolloClient: apollo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            },\n            __self: this\n          })));\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error);\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind();\n      } // Extract query data from the Apollo's store\n\n\n      const apolloState = apollo.cache.extract();\n      return _objectSpread({}, appProps, {\n        apolloState\n      });\n    }\n\n    constructor(props) {\n      super(props); // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n\n      _defineProperty(this, \"apolloClient\", void 0);\n\n      this.apolloClient = initApollo(props.apolloState, {\n        getToken: () => {\n          return parseCookies().token;\n        }\n      });\n    }\n\n    render() {\n      return React.createElement(App, _extends({\n        apolloClient: this.apolloClient\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }));\n    }\n\n  }, _defineProperty(_class, \"displayName\", `WithData(${App.displayName})`), _defineProperty(_class, \"propTypes\", {\n    apolloState: PropTypes.object.isRequired\n  }), _temp;\n});","map":{"version":3,"sources":["C:\\git\\whatabyte\\lib\\withApollo.tsx"],"names":["React","cookie","PropTypes","getDataFromTree","Head","initApollo","isBrowser","parseCookies","req","options","parse","headers","document","App","WithData","Component","getInitialProps","ctx","AppTree","res","apollo","getToken","token","apolloClient","appProps","finished","error","console","rewind","apolloState","cache","extract","constructor","props","render","displayName","object","isRequired"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAGA,SAASC,YAAT,CAAsBC,GAAtB,EAAiCC,OAAO,GAAG,EAA3C,EAA+C;AAC9C,SAAOR,MAAM,CAACS,KAAP,CAAaF,GAAG,GAAGA,GAAG,CAACG,OAAJ,CAAYV,MAAZ,IAAsB,EAAzB,GAA8BW,QAAQ,CAACX,MAAvD,EAA+DQ,OAA/D,CAAP;AACA;;AAED,gBAAgBI,GAAD,IAAc;AAAA;;AAC5B,0BAAO,MAAMC,QAAN,SAAuBd,KAAK,CAACe,SAA7B,CAAuC;AAM7C,iBAAaC,eAAb,CAA6BC,GAA7B,EAAuC;AACtC,YAAM;AACLC,QAAAA,OADK;AAELD,QAAAA,GAAG,EAAE;AAAET,UAAAA,GAAF;AAAOW,UAAAA;AAAP;AAFA,UAGFF,GAHJ;AAIA,YAAMG,MAAM,GAAGf,UAAU,CACxB,EADwB,EAExB;AACCgB,QAAAA,QAAQ,EAAE,MAAMd,YAAY,CAACC,GAAD,CAAZ,CAAkBc;AADnC,OAFwB,CAAzB;AAOAL,MAAAA,GAAG,CAACA,GAAJ,CAAQM,YAAR,GAAuBH,MAAvB;AAEA,UAAII,QAAQ,GAAG,EAAf;;AACA,UAAIX,GAAG,CAACG,eAAR,EAAyB;AACxBQ,QAAAA,QAAQ,GAAG,MAAMX,GAAG,CAACG,eAAJ,CAAoBC,GAApB,CAAjB;AACA;;AAED,UAAIE,GAAG,IAAIA,GAAG,CAACM,QAAf,EAAyB;AACxB;AACA;AACA,eAAO,EAAP;AACA;;AAED,UAAI,CAACnB,SAAL,EAAgB;AACf;AACA;AACA,YAAI;AACH;AACA,gBAAMH,eAAe,CAAC,oBAAC,OAAD,eAAaqB,QAAb;AAAuB,YAAA,YAAY,EAAEJ,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAD,CAArB;AACA,SAHD,CAGE,OAAOM,KAAP,EAAc;AACf;AACA;AACA;AACAC,UAAAA,OAAO,CAACD,KAAR,CAAc,uCAAd,EAAuDA,KAAvD;AACA,SAXc,CAaf;AACA;;;AACAtB,QAAAA,IAAI,CAACwB,MAAL;AACA,OAzCqC,CA2CtC;;;AACA,YAAMC,WAAW,GAAGT,MAAM,CAACU,KAAP,CAAaC,OAAb,EAApB;AAEA,+BACIP,QADJ;AAECK,QAAAA;AAFD;AAIA;;AAIDG,IAAAA,WAAW,CAACC,KAAD,EAAa;AACvB,YAAMA,KAAN,EADuB,CAEvB;AACA;;AAHuB;;AAIvB,WAAKV,YAAL,GAAoBlB,UAAU,CAAC4B,KAAK,CAACJ,WAAP,EAAoB;AACjDR,QAAAA,QAAQ,EAAE,MAAM;AACf,iBAAOd,YAAY,GAAGe,KAAtB;AACA;AAHgD,OAApB,CAA9B;AAKA;;AAEDY,IAAAA,MAAM,GAAG;AACR,aAAO,oBAAC,GAAD;AAAK,QAAA,YAAY,EAAE,KAAKX;AAAxB,SAA0C,KAAKU,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACA;;AAzE4C,GAA9C,yCACuB,YAAWpB,GAAG,CAACsB,WAAY,GADlD,wCAEoB;AAClBN,IAAAA,WAAW,EAAE3B,SAAS,CAACkC,MAAV,CAAiBC;AADZ,GAFpB;AA2EA,CA5ED","sourcesContent":["import React from 'react';\r\nimport cookie from 'cookie';\r\nimport PropTypes from 'prop-types';\r\nimport { getDataFromTree } from 'react-apollo';\r\nimport Head from 'next/head';\r\n\r\nimport initApollo from './initApollo';\r\nimport { isBrowser } from './isBrowser';\r\nimport { ApolloClient, NormalizedCacheObject } from 'apollo-boost';\r\n\r\nfunction parseCookies(req?: any, options = {}) {\r\n\treturn cookie.parse(req ? req.headers.cookie || '' : document.cookie, options);\r\n}\r\n\r\nexport default (App: any) => {\r\n\treturn class WithData extends React.Component {\r\n\t\tstatic displayName = `WithData(${App.displayName})`;\r\n\t\tstatic propTypes = {\r\n\t\t\tapolloState: PropTypes.object.isRequired\r\n\t\t};\r\n\r\n\t\tstatic async getInitialProps(ctx: any) {\r\n\t\t\tconst {\r\n\t\t\t\tAppTree,\r\n\t\t\t\tctx: { req, res }\r\n\t\t\t} = ctx;\r\n\t\t\tconst apollo = initApollo(\r\n\t\t\t\t{},\r\n\t\t\t\t{\r\n\t\t\t\t\tgetToken: () => parseCookies(req).token\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tctx.ctx.apolloClient = apollo;\r\n\r\n\t\t\tlet appProps = {};\r\n\t\t\tif (App.getInitialProps) {\r\n\t\t\t\tappProps = await App.getInitialProps(ctx);\r\n\t\t\t}\r\n\r\n\t\t\tif (res && res.finished) {\r\n\t\t\t\t// When redirecting, the response is finished.\r\n\t\t\t\t// No point in continuing to render\r\n\t\t\t\treturn {};\r\n\t\t\t}\r\n\r\n\t\t\tif (!isBrowser) {\r\n\t\t\t\t// Run all graphql queries in the component tree\r\n\t\t\t\t// and extract the resulting data\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// Run all GraphQL queries\r\n\t\t\t\t\tawait getDataFromTree(<AppTree {...appProps} apolloClient={apollo} />);\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\t// Prevent Apollo Client GraphQL errors from crashing SSR.\r\n\t\t\t\t\t// Handle them in components via the data.error prop:\r\n\t\t\t\t\t// https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\r\n\t\t\t\t\tconsole.error('Error while running `getDataFromTree`', error);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// getDataFromTree does not call componentWillUnmount\r\n\t\t\t\t// head side effect therefore need to be cleared manually\r\n\t\t\t\tHead.rewind();\r\n\t\t\t}\r\n\r\n\t\t\t// Extract query data from the Apollo's store\r\n\t\t\tconst apolloState = apollo.cache.extract();\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...appProps,\r\n\t\t\t\tapolloState\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tapolloClient: ApolloClient<NormalizedCacheObject>;\r\n\r\n\t\tconstructor(props: any) {\r\n\t\t\tsuper(props);\r\n\t\t\t// `getDataFromTree` renders the component first, the client is passed off as a property.\r\n\t\t\t// After that rendering is done using Next's normal rendering pipeline\r\n\t\t\tthis.apolloClient = initApollo(props.apolloState, {\r\n\t\t\t\tgetToken: () => {\r\n\t\t\t\t\treturn parseCookies().token;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\trender() {\r\n\t\t\treturn <App apolloClient={this.apolloClient} {...this.props} />;\r\n\t\t}\r\n\t};\r\n};\r\n"]},"metadata":{},"sourceType":"module"}