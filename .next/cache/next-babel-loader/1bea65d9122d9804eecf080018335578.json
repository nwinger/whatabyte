{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\git\\\\whatabyte\\\\lib\\\\withApollo.tsx\";\nimport React from 'react';\nimport cookie from 'cookie';\nimport PropTypes from 'prop-types';\nimport { getDataFromTree } from 'react-apollo';\nimport Head from 'next/head';\nimport initApollo from './initApollo';\nimport { isBrowser } from './isBrowser';\n\nfunction parseCookies(req) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return cookie.parse(req ? req.headers.cookie || '' : document.cookie, options);\n}\n\nexport default (function (App) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(WithData, _React$Component);\n\n    _createClass(WithData, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var AppTree, _ctx$ctx, req, res, apollo, appProps, apolloState;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  AppTree = ctx.AppTree, _ctx$ctx = ctx.ctx, req = _ctx$ctx.req, res = _ctx$ctx.res;\n                  apollo = initApollo({}, {\n                    getToken: function getToken() {\n                      return parseCookies(req).token;\n                    }\n                  });\n                  ctx.ctx.apolloClient = apollo;\n                  appProps = {};\n\n                  if (!App.getInitialProps) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 7;\n                  return App.getInitialProps(ctx);\n\n                case 7:\n                  appProps = _context.sent;\n\n                case 8:\n                  if (!(res && res.finished)) {\n                    _context.next = 10;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", {});\n\n                case 10:\n                  if (isBrowser) {\n                    _context.next = 20;\n                    break;\n                  }\n\n                  _context.prev = 11;\n                  _context.next = 14;\n                  return getDataFromTree(React.createElement(AppTree, _extends({}, appProps, {\n                    apolloClient: apollo,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 52\n                    },\n                    __self: this\n                  })));\n\n                case 14:\n                  _context.next = 19;\n                  break;\n\n                case 16:\n                  _context.prev = 16;\n                  _context.t0 = _context[\"catch\"](11);\n                  // Prevent Apollo Client GraphQL errors from crashing SSR.\n                  // Handle them in components via the data.error prop:\n                  // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 19:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind();\n\n                case 20:\n                  // Extract query data from the Apollo's store\n                  apolloState = apollo.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 22:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[11, 16]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function WithData(props) {\n      var _this;\n\n      _classCallCheck(this, WithData);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithData).call(this, props)); // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n\n      _defineProperty(_assertThisInitialized(_this), \"apolloClient\", void 0);\n\n      _this.apolloClient = initApollo(props.apolloState, {\n        getToken: function getToken() {\n          return parseCookies().token;\n        }\n      });\n      return _this;\n    }\n\n    _createClass(WithData, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(App, _extends({\n          apolloClient: this.apolloClient\n        }, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }));\n      }\n    }]);\n\n    return WithData;\n  }(React.Component), _defineProperty(_class, \"displayName\", \"WithData(\".concat(App.displayName, \")\")), _defineProperty(_class, \"propTypes\", {\n    apolloState: PropTypes.object.isRequired\n  }), _temp;\n});","map":{"version":3,"sources":["C:\\git\\whatabyte\\lib\\withApollo.tsx"],"names":["React","cookie","PropTypes","getDataFromTree","Head","initApollo","isBrowser","parseCookies","req","options","parse","headers","document","App","ctx","AppTree","res","apollo","getToken","token","apolloClient","appProps","getInitialProps","finished","console","error","rewind","apolloState","cache","extract","props","Component","displayName","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport cookie from 'cookie';\r\nimport PropTypes from 'prop-types';\r\nimport { getDataFromTree } from 'react-apollo';\r\nimport Head from 'next/head';\r\n\r\nimport initApollo from './initApollo';\r\nimport { isBrowser } from './isBrowser';\r\nimport { ApolloClient, NormalizedCacheObject } from 'apollo-boost';\r\n\r\nfunction parseCookies(req?: any, options = {}) {\r\n\treturn cookie.parse(req ? req.headers.cookie || '' : document.cookie, options);\r\n}\r\n\r\nexport default (App: any) => {\r\n\treturn class WithData extends React.Component {\r\n\t\tstatic displayName = `WithData(${App.displayName})`;\r\n\t\tstatic propTypes = {\r\n\t\t\tapolloState: PropTypes.object.isRequired\r\n\t\t};\r\n\r\n\t\tstatic async getInitialProps(ctx: any) {\r\n\t\t\tconst {\r\n\t\t\t\tAppTree,\r\n\t\t\t\tctx: { req, res }\r\n\t\t\t} = ctx;\r\n\t\t\tconst apollo = initApollo(\r\n\t\t\t\t{},\r\n\t\t\t\t{\r\n\t\t\t\t\tgetToken: () => parseCookies(req).token\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tctx.ctx.apolloClient = apollo;\r\n\r\n\t\t\tlet appProps = {};\r\n\t\t\tif (App.getInitialProps) {\r\n\t\t\t\tappProps = await App.getInitialProps(ctx);\r\n\t\t\t}\r\n\r\n\t\t\tif (res && res.finished) {\r\n\t\t\t\t// When redirecting, the response is finished.\r\n\t\t\t\t// No point in continuing to render\r\n\t\t\t\treturn {};\r\n\t\t\t}\r\n\r\n\t\t\tif (!isBrowser) {\r\n\t\t\t\t// Run all graphql queries in the component tree\r\n\t\t\t\t// and extract the resulting data\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// Run all GraphQL queries\r\n\t\t\t\t\tawait getDataFromTree(<AppTree {...appProps} apolloClient={apollo} />);\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\t// Prevent Apollo Client GraphQL errors from crashing SSR.\r\n\t\t\t\t\t// Handle them in components via the data.error prop:\r\n\t\t\t\t\t// https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\r\n\t\t\t\t\tconsole.error('Error while running `getDataFromTree`', error);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// getDataFromTree does not call componentWillUnmount\r\n\t\t\t\t// head side effect therefore need to be cleared manually\r\n\t\t\t\tHead.rewind();\r\n\t\t\t}\r\n\r\n\t\t\t// Extract query data from the Apollo's store\r\n\t\t\tconst apolloState = apollo.cache.extract();\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...appProps,\r\n\t\t\t\tapolloState\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tapolloClient: ApolloClient<NormalizedCacheObject>;\r\n\r\n\t\tconstructor(props: any) {\r\n\t\t\tsuper(props);\r\n\t\t\t// `getDataFromTree` renders the component first, the client is passed off as a property.\r\n\t\t\t// After that rendering is done using Next's normal rendering pipeline\r\n\t\t\tthis.apolloClient = initApollo(props.apolloState, {\r\n\t\t\t\tgetToken: () => {\r\n\t\t\t\t\treturn parseCookies().token;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\trender() {\r\n\t\t\treturn <App apolloClient={this.apolloClient} {...this.props} />;\r\n\t\t}\r\n\t};\r\n};\r\n"]},"metadata":{},"sourceType":"module"}