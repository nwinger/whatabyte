{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.ccbf266b3c82ca08d5bc.hot-update.js","sources":["webpack:///./lib/withApollo.tsx"],"sourcesContent":["import React from 'react';\r\nimport cookie from 'cookie';\r\nimport PropTypes from 'prop-types';\r\nimport { getDataFromTree } from 'react-apollo';\r\nimport Head from 'next/head';\r\n\r\nimport initApollo from './initApollo';\r\nimport { isBrowser } from './isBrowser';\r\nimport { ApolloClient, NormalizedCacheObject } from 'apollo-boost';\r\n\r\nfunction parseCookies(req?: any, options = {}) {\r\n\treturn cookie.parse(req ? req.headers.cookie || '' : document.cookie, options);\r\n}\r\n\r\nexport default (App: any) => {\r\n\tconsole.log(App);\r\n\treturn class WithData extends React.Component {\r\n\t\tstatic displayName = `WithData(${App.displayName})`;\r\n\t\tstatic propTypes = {\r\n\t\t\tapolloState: PropTypes.object.isRequired\r\n\t\t};\r\n\r\n\t\tstatic async getInitialProps(ctx: any) {\r\n\t\t\tconst {\r\n\t\t\t\tAppTree,\r\n\t\t\t\tctx: { req, res }\r\n\t\t\t} = ctx;\r\n\t\t\tconst apollo = initApollo(\r\n\t\t\t\t{},\r\n\t\t\t\t{\r\n\t\t\t\t\tgetToken: () => parseCookies(req).token\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tctx.ctx.apolloClient = apollo;\r\n\r\n\t\t\tlet appProps = {};\r\n\t\t\tif (App.getInitialProps) {\r\n\t\t\t\tappProps = await App.getInitialProps(ctx);\r\n\t\t\t}\r\n\r\n\t\t\tif (res && res.finished) {\r\n\t\t\t\t// When redirecting, the response is finished.\r\n\t\t\t\t// No point in continuing to render\r\n\t\t\t\treturn {};\r\n\t\t\t}\r\n\r\n\t\t\tif (!isBrowser) {\r\n\t\t\t\t// Run all graphql queries in the component tree\r\n\t\t\t\t// and extract the resulting data\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// Run all GraphQL queries\r\n\t\t\t\t\tawait getDataFromTree(<AppTree {...appProps} apolloClient={apollo} />);\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\t// Prevent Apollo Client GraphQL errors from crashing SSR.\r\n\t\t\t\t\t// Handle them in components via the data.error prop:\r\n\t\t\t\t\t// https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\r\n\t\t\t\t\tconsole.error('Error while running `getDataFromTree`', error);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// getDataFromTree does not call componentWillUnmount\r\n\t\t\t\t// head side effect therefore need to be cleared manually\r\n\t\t\t\tHead.rewind();\r\n\t\t\t}\r\n\r\n\t\t\t// Extract query data from the Apollo's store\r\n\t\t\tconst apolloState = apollo.cache.extract();\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...appProps,\r\n\t\t\t\tapolloState\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tapolloClient: ApolloClient<NormalizedCacheObject>;\r\n\r\n\t\tconstructor(props: any) {\r\n\t\t\tsuper(props);\r\n\t\t\t// `getDataFromTree` renders the component first, the client is passed off as a property.\r\n\t\t\t// After that rendering is done using Next's normal rendering pipeline\r\n\t\t\tthis.apolloClient = initApollo(props.apolloState, {\r\n\t\t\t\tgetToken: () => {\r\n\t\t\t\t\treturn parseCookies().token;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\trender() {\r\n\t\t\treturn <App apolloClient={this.apolloClient} {...this.props} />;\r\n\t\t}\r\n\t};\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAQA;AAGA;AAGA;AAAA;AAAA;AADA;AAKA;AAEA;AACA;AArBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAsBA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AArCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAsCA;AACA;AACA;AACA;AACA;AA1CA;AA4CA;AACA;AACA;AACA;AA/CA;AAiDA;AACA;AAlDA;AAsDA;AAtDA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AA2DA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AAJA;AACA;AAGA;AACA;AACA;AACA;AAHA;AAJA;AASA;AACA;AAtEA;AAAA;AAAA;AAwEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAzEA;AACA;AADA;AAAA;AAGA;AADA;AAyEA;;;;A","sourceRoot":""}